"""
Django settings for cdrom project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-_9_vc(b)j*k-b*_g$-oyd3$s1mx=mpo4b==mt_oak9gre5%ftw"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    "core.apps.CoreConfig",
    "usuarios.apps.UsuariosConfig",
    "instituciones.apps.InstitucionesConfig",
    "aulas.apps.AulasConfig",
    "cursos.apps.CursosConfig",
    "alumnos.apps.AlumnosConfig",
    "profesores.apps.ProfesoresConfig",
    "analytics.apps.AnalyticsConfig",

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "analytics.middleware.RequestLoggingMiddleware",
]


ROOT_URLCONF = "cdrom.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.app_base_context",
            ],
        },
    },
]

WSGI_APPLICATION = "cdrom.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DB_ENGINE = os.environ.get('DB_ENGINE', 'django.db.backends.sqlite3')
DB_NAME = os.environ.get('DB_NAME', BASE_DIR / 'db.sqlite3')
DB_HOST = os.environ.get('DB_HOST', 'localhost')
DB_PORT = os.environ.get('DB_PORT', '5432')
DB_USER = os.environ.get('DB_USER', '')
DB_PASSWORD = os.environ.get('DB_PASSWORD', '')

DATABASES = {
    "default": {"ENGINE": DB_ENGINE, "NAME": DB_NAME}
}

if DB_USER and DB_PASSWORD:
    DATABASES["default"].update({"USER": DB_USER, "PASSWORD": DB_PASSWORD})

if DB_HOST:
    DATABASES["default"].update({"HOST": DB_HOST, "PORT": DB_PORT})

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Argentina/Cordoba"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/


STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = "static/"

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ==============================================================================
# Custom settings

APP_LABEL = os.environ.get('APP_LABEL', 'CLASSDROM')
APP_VERSION = "0.1.201"
APP_EMAIL = os.environ.get('APP_EMAIL', 'academia@algo.com')
APP_URL = os.environ.get('APP_URL', 'http://localhost:8000')
APP_WHATSAPP_COUNTRY_CODE = os.environ.get('APP_WHATSAPP_COUNTRY_CODE', '54')
APP_WHATSAPP_ZONE_CODE = os.environ.get('APP_WHATSAPP_ZONE_CODE', '3543')
APP_WHATSAPP_NUMBER = os.environ.get('APP_WHATSAPP_NUMBER', '556677')
APP_INSTAGRAM = os.environ.get('APP_INSTAGRAM', 'academia.xxx')
APP_YOUTUBE_CHANNEL = os.environ.get('APP_YOUTUBE_CHANNEL', 'ydydyfyf')

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Test-specific settings
if 'test' in sys.argv:
    # Use default file storage for tests to avoid staticfiles manifest issues
    STORAGES["default"] = {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    }
    # Use a temporary media root for tests
    import tempfile
    MEDIA_ROOT = tempfile.mkdtemp()

# TODO media files in ephimeral Heroku will not work
# if not DEBUG:  # Production/Heroku
#     # Configure external storage (S3, Cloudinary, etc.)
#     DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# else:  # Local development
#     # Use local file storage
#     DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'app.log',
        }
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
}

LOGIN_URL = '/admin/login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Para definir tus cosas en local_settings.py
try:
    from .local_settings import *  # noqa
except ImportError:
    pass
